#+TITLE: Sesión 21

* Resumen

En esta sesión 21 del taller de Rust se realizó lo siguiente:

Se continúa con el trabajo de SQLx (base de datos en rust) con
postgres, implementado herramientas para apoyo al desarrollo y
monitoreo de una aplicación. Además de profundizar en la creación de
la API para conectarse a base de datos bajo diferentes acciones.

- cambio de nombre del proyecto
- introducción de logging con tracing y monitoreo de eventos
- creación de test e implementación de funciones para 'delete' o
  borrar datos
- ejercicios propuestos.


* Cambio de nombre del proyecto

test_db2 -> ejemplo_db2

#+begin_src bash :results output
mv test_db2 ejemplo_db2
#+end_src

#+RESULTS:


#+begin_src bash :results output
cd ejemplo_db2 
ls
#+end_src

#+RESULTS:
: Cargo.lock
: Cargo.toml
: migrations
: src
: tests

#+begin_src bash :results output
cd ejemplo_db2
grep -n "test" Cargo.toml
sed -i 's/test_db2/ejemplo_db2/g' Cargo.toml
#+end_src

#+RESULTS:
: 2:name = "test_db2"


#+begin_src bash
cd ejemplo_db2
grep -n "test" Cargo.toml
#+end_src

#+RESULTS:


Lo siguiente es inspeccionar todos los *.rs*

#+begin_src bash :results output
cd ejemplo_db2
find -iname "*.rs"|grep -E "(src|tests)"|xargs grep "test_db2"
#+end_src

#+RESULTS:
: ./tests/api/ciudad.rs:use test_db2::api::ciudad::{Ciudad,
: ./src/main.rs:use test_db2::api::ciudad::{Ciudad,get_ciudades,get_city};
: ./src/main.rs:use test_db2::api::temperatura::{Temperatura,get_temperaturas};
: ./src/bin/load_fixtures.rs:use test_db2::api::ciudad::{Ciudad,read_csv_cities, get_ciudades};
: ./src/bin/load_fixtures.rs:use test_db2::api::temperatura::{read_csv_temperatura};
: ./src/bin/read_temperature.rs:use test_db2::api::temperatura::{Temperatura,get_temperaturas};
: ./src/bin/read_cities.rs:use test_db2::api::ciudad::{Ciudad,get_ciudades,get_city};

#+begin_src bash :results output
cd ejemplo_db2
find -iname "*.rs"|grep -E "(src|tests)"| xargs sed -i 's/test_db2/ejemplo_db2/g'
#+end_src

#+RESULTS:


#+begin_src bash :results output
cd ejemplo_db2
find -iname "*.rs"|grep -E "(src|tests)"|xargs grep "ejemplo_db2"
#+end_src

#+RESULTS:
: ./tests/api/ciudad.rs:use ejemplo_db2::api::ciudad::{Ciudad,
: ./src/main.rs:use ejemplo_db2::api::ciudad::{Ciudad,get_ciudades,get_city};
: ./src/main.rs:use ejemplo_db2::api::temperatura::{Temperatura,get_temperaturas};
: ./src/bin/load_fixtures.rs:use ejemplo_db2::api::ciudad::{Ciudad,read_csv_cities, get_ciudades};
: ./src/bin/load_fixtures.rs:use ejemplo_db2::api::temperatura::{read_csv_temperatura};
: ./src/bin/read_temperature.rs:use ejemplo_db2::api::temperatura::{Temperatura,get_temperaturas};
: ./src/bin/read_cities.rs:use ejemplo_db2::api::ciudad::{Ciudad,get_ciudades,get_city};



* Logging y tracing

Implementar tracing

- span
- event

Trait Subscription


* Update tables

#+begin_src sql
UPDATE table_name
SET column1 = value1, column2 = value2, ...
WHERE condition; 
#+end_src


En rust

#+begin_src rust
let updated_domains = sqlx::query_as!(
  Domain,
  "update domains set name = 'my-2.domain.com' where id = $1 returning *",
  1i64
)
  .fetch_all(&pool)
  .await.expect("Unable to update a domain");
#+end_src

** Actualizar ciudad

** Actualizar temperatura

* Borrar

#+begin_src sql
DELETE FROM table_name WHERE condition;
#+end_src

#+begin_src rust
let deleted_domains = sqlx::query_as!(
  Domain,
  "delete from domains where id = $1 returning *",
  1i64
)
  .fetch_all(&pool)
  .await.expect("Unable to delete domains");
#+end_src

* Test

Revisar test

* Transacciones

https://betterprogramming.pub/how-to-interact-with-postgresql-from-rust-using-sqlx-cfa2a7c758e7


#+begin_src rust
let mut tx = pool.begin().await.expect("Unable to begin transaction");

let inserted_domain = sqlx::query_as!(
  Domain,
  "insert into domains(name) values ($1) returning *",
  "your.domain.com"
)
  .fetch_one(&mut tx)
  .await.expect("Unable to insert a domain");

let inserted_short_url = sqlx::query_as!(
  ShortUrl,
  "insert into short_urls(domain_id, short, long) values ($1, $2, $3) returning *",
  inserted_domain.id, "short1", "long1"
)
  .fetch_one(&mut tx)
  .await.expect("Unable to insert a short url");


tx.commit()
  .await.expect("Unable to commit the transaction");
#+end_src
