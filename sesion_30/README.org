#+TITLE: Generar certificados self-signed


En esta sesión se activa la configuración del servicio gRPC en un host
público (vps #digitalocean) debian. Se evalua su operación y se
reescribe parte del código de los binarios para hacer más flexible sus
parámetros de configuración. Además se realiza la configuración para
operar con SSL, creando las llaves y agregando la capa de
encriptación.

#rust #emacs #ssl #openssl #tls #grpc #tonic


#+begin_src bash
sudo apt-get -y install openssl
#+end_src


#+begin_src bash
ls ejemplos
#+end_src

#+RESULTS:


Ejemplos:

- https://www.linode.com/docs/guides/create-a-self-signed-tls-certificate/


Generar las llaves self-signed certificates

#+begin_src bash
openssl req -new -newkey rsa:4096 -x509 -sha256 -days 365 -nodes -out ejemplos/MyCertificate.crt -keyout ejemplos/MyKey.key
#+end_src

#+RESULTS:

EN un proyecto gRPC, para incluir tls:

https://github.com/hyperium/tonic/blob/master/examples/src/tls/server.rs


Instalar librerias de criptografia:

#+begin_src bash
sudo apt-get install libcrypto++-dev libcrypto++-doc libcrypto++-utils
#+end_src


Cuando se usa *openssl* con certificados self-signed recomienan usar:
https://docs.rs/tonic-openssl/0.1.0/tonic_openssl/

Y teniendo en cuenta esto:
https://docs.rs/tonic/0.4.3/tonic/struct.Request.html#method.peer_certs

De aquí:
https://stackoverflow.com/questions/76049656/unexpected-notvalidforname-with-rusts-tonic-with-tls

** En gRPC


Server

#+begin_src rust
pub mod pb {
    tonic::include_proto!("/grpc.examples.unaryecho");
}

use pb::{EchoRequest, EchoResponse};
use tonic::{
    transport::{
        server::{TcpConnectInfo, TlsConnectInfo},
        Identity, Server, ServerTlsConfig,
    },
    Request, Response, Status,
};

type EchoResult<T> = Result<Response<T>, Status>;

#[derive(Default)]
pub struct EchoServer;

#[tonic::async_trait]
impl pb::echo_server::Echo for EchoServer {
    async fn unary_echo(&self, request: Request<EchoRequest>) -> EchoResult<EchoResponse> {
        let conn_info = request
            .extensions()
            .get::<TlsConnectInfo<TcpConnectInfo>>()
            .unwrap();
        println!(
            "Got a request from {:?} with info {:?}",
            request.remote_addr(),
            conn_info
        );

        let message = request.into_inner().message;
        Ok(Response::new(EchoResponse { message }))
    }
}

#[tokio::main]
async fn main() -> Result<(), Box<dyn std::error::Error>> {
    let data_dir = std::path::PathBuf::from_iter([std::env!("CARGO_MANIFEST_DIR"), "data"]);
    let cert = std::fs::read_to_string(data_dir.join("tls/server.pem"))?;
    let key = std::fs::read_to_string(data_dir.join("tls/server.key"))?;

    let identity = Identity::from_pem(cert, key);

    let addr = "[::1]:50051".parse().unwrap();
    let server = EchoServer::default();

    Server::builder()
        .tls_config(ServerTlsConfig::new().identity(identity))?
        .add_service(pb::echo_server::EchoServer::new(server))
        .serve(addr)
        .await?;

    Ok(())
}
#+end_src


El cliente

#+begin_src rust
pub mod pb {
    tonic::include_proto!("/grpc.examples.unaryecho");
}

use pb::{echo_client::EchoClient, EchoRequest};
use tonic::transport::{Certificate, Channel, ClientTlsConfig};

#[tokio::main]
async fn main() -> Result<(), Box<dyn std::error::Error>> {
    let data_dir = std::path::PathBuf::from_iter([std::env!("CARGO_MANIFEST_DIR"), "data"]);
    let pem = std::fs::read_to_string(data_dir.join("tls/ca.pem"))?;
    let ca = Certificate::from_pem(pem);

    let tls = ClientTlsConfig::new()
        .ca_certificate(ca)
        .domain_name("example.com");

    let channel = Channel::from_static("http://[::1]:50051")
        .tls_config(tls)?
        .connect()
        .await?;

    let mut client = EchoClient::new(channel);
    let request = tonic::Request::new(EchoRequest {
        message: "hello".into(),
    });

    let response = client.unary_echo(request).await?;

    println!("RESPONSE={:?}", response);

    Ok(())
}
#+end_src


* Server Público

IP 165.227.193.0
