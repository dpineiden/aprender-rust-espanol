#+TITLE: Taller de Rust 34: De Rust a Python
#+DATE: <2023-09-15 Fri>

La capacidad de interacción entre los diferentes lenguajes es clave
para realizar software compatible y sacarle partido a las distintas
características que provee cada uno.

Por ejemplo, con *python* tenemos un lenguaje sencillo de aprender y
potente para todo lo que es *data science* debido a los múltiples
módulos disponibles. Con *rust* tenemos un lenguaje potente, compilado
y eficiente.

Entonces ¿cómo los ponemos a trabajar juntos? Es posible crear
software con *rust* y correrlo como un módulo en python.

En esta sesión aprenderemos las bases que nos permitirán desarrollar
programas en rust y crear el módulo en *python*.

 
* Primero

Debemos tener instalado python en sus paquetes de desarrollo.

#+begin_src bash
sudo apt install python3-dev
sudo apt install python3-venv
#+end_src

Creamos el ambiente adecuado para crear nuestro primer módulo de
python-rust.

#+begin_src bash
mkdir string_sum
cd string_sum
python -m venv .env
source .env/bin/activate
pip install maturin
#+end_src


** Maturin

https://pyo3.rs/v0.19.2/module

Crate o módulo que permite adminitrar y gestionar creates rust para python.

https://github.com/PyO3/maturin

Comandos principales:

- maturin new :: creates a new cargo project with maturin configured. 
- maturin publish :: builds the crate into python packages and publishes
  them to pypi. 
- maturin build :: builds the wheels and stores them in a folder
  (target/wheels by default), but doesn't upload them. It's possible
  to upload those with twine or maturin upload. 
- maturin develop :: builds the crate and installs it as a python module
  directly in the current virtualenv. Note that while maturin develop
  is faster, it doesn't support all the feature that running pip
  install after maturin build supports. 


Se inicializa un proyecto rust-python con:

#+begin_src bash
maturin init
#+end_src

Se despliegan los siguientes archivos. Se observa uno que define el
paquete python (pyproject.toml) y para rust (Cargo.toml)

#+begin_src bash
ls string_sum
#+end_src

#+RESULTS:
| Cargo.toml     |
| pyproject.toml |
| src            |

El contenido de cada uno de estos archivos de configuraición se puede
ver.

#+begin_src bash :results output
cat string_sum/Cargo.toml
#+end_src

#+RESULTS:
#+begin_example
[package]
name = "string_sum"
version = "0.1.0"
edition = "2021"

# See more keys and their definitions at https://doc.rust-lang.org/cargo/reference/manifest.html
[lib]
name = "string_sum"
crate-type = ["cdylib"]

[dependencies]
pyo3 = "0.19.0"
#+end_example

Y para python.

#+begin_src bash :results output
cat string_sum/pyproject.toml
#+end_src

#+RESULTS:
#+begin_example
[build-system]
requires = ["maturin>=1.2,<2.0"]
build-backend = "maturin"

[project]
name = "string_sum"
requires-python = ">=3.7"
classifiers = [
    "Programming Language :: Rust",
    "Programming Language :: Python :: Implementation :: CPython",
    "Programming Language :: Python :: Implementation :: PyPy",
]


[tool.maturin]
features = ["pyo3/extension-module"]
#+end_example

Luego de esto, basta con crear el software en rust, como en
*src/lib.rs* para continuar con la compilación adecuada a python.

#+begin_src bash :results output 
cat string_sum/src/lib.rs
#+end_src

Este es el código inicial o base.

#+RESULTS:
#+begin_example
use pyo3::prelude::*;

/// Formats the sum of two numbers as string.
#[pyfunction]
fn sum_as_string(a: usize, b: usize) -> PyResult<String> {
    Ok((a + b).to_string())
}

/// A Python module implemented in Rust.
#[pymodule]
fn string_sum(_py: Python, m: &PyModule) -> PyResult<()> {
    m.add_function(wrap_pyfunction!(sum_as_string, m)?)?;
    Ok(())
}
#+end_example

Luego, se have la build a python 

#+begin_src bash
maturin develop
#+end_src

Lo importante acá a considerar serán las macros decoradoras:

- pyfunction
- pymodule

Que obedece a la lógica de 'declarar' una función y luego registrarla
en el módulo.

Se pueden añadir nuevas funcionalidades a lo que ya se tiene.

Se añade al registro del módulo.


Acá cabe preguntar, 

- ¿Cómo se gestiona una jerarquía de modulos?
- ¿Cómo se gestionan los errores?
- ¿Cómo declarar un struct en rust y usarla en python?
- ¿Cómo se transfiere la implementación de traits?
- ¿Cómo se activas las característiacas async o de paralelización?

** Jerarquía de módulos

Es usual crear diferentes grupos de funcionalidades u objetos en el
mismo módulo. Para lograr una estructura de árbol, se declaran
submódulos en el programa.

Usando la declaración de objeto *PyModule*, es posible construir la
estructura.

#+begin_src python
import string_sum
string_sum.child_module.func
string_sum.child_module.func()
#+end_src


* Estructuras a clases

Las condiciones para crear struct que se trasladen a clases debe ser:

- no usar lifetimes
- no usar genéricos
- debe implementar trait Send


** Crear la estructura

** Crear los métodos y constructores

** Registrar en el módulo

