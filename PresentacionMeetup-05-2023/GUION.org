#+TITLE: Taller de Rust en Meetup México

* ¿Qué es el taller de rust?

Es una iniciativa *autónoma y colectiva* que nace con el fin de crear
contenido en español y aprender paso a paso el lenguaje de forma
comunitaria en que el conocimiento se comparte y todos nos
enriquecemos en este recurso.

Es taller y no curso porque quien enseña también es parte del proceso
de aprendizaje y la preparación del contenido de las clases no es
absoluto sino parcial. Lo que nos lleva a sesiones en que hay dudas y
errores que se van resolviendo en el camino. 

* Motivación

Entre las motivaciones que me llevaron a iniciar el taller:

- Un lenguaje que tiene un muy bajo consumo de energía (paper 2017)
- Herramientas de desarrollo excelentes para creación de proyectos
  (cargo)
- Es difícil pero no imposible
- La necesidad de tener contenidos tecnológicos en castellano
- Aplicación de métodos pedagógicos comunitarios en temas complejos

* Desafío

El principal desafío ha sido abordar un lenguaje *complejo*, ordenar
la complejidad de manera /creciente/, con ejemplos que ocupen los
conceptos y recursos ya enseñados en sesiones anteriores.

Mantener el taller con sesiones semanales los sábados por la mañana
(8:00am Chile), no carretear o carretear poco los viernes :)

Dedicarle tiempo a la preparacíon del taller, ordenar los temas a
tratar, tomar apuntes, decidir que mostrar o no, revisar
documentación. Toma de 3 horas a 10 aprox.

Encontrar un enfoque lo más didáctico posible, asociado a la cultura
latinoamericana. No ejemplos 'foo-bar', buh!

* Principios

Conocimiento estimado antes de iniciar el taller
60%.

Aumento de las 'skills' durante el taller 30%.

Para preparar un taller es necesario un 50% recomendado

* Metodología

Establecer los principales textos referentes como

- Rust Book
- Documentación
- Refactoring to Rust
- Rust Programming by Example
- Programming Rust
- Etc

Conocer los lenguajes referentes.

¿Qué hay de ?

- C
- C++
- Python
- Javascript
- Haskell

¿Qué se rescata de cada uno de ellos?

Estilos y paradigmas

- Funcional
- Estructurado
- Basado en 'trait'

Establecer categorías de los conceptos más importantes del lenguaje

- tipos
- genericos
- traits
- estructuras
- métodos y funciones
- closures
- hilos,etc

Antes de empezar:

- Tener horas de práctica: 400hr


* Temas a tratar en el taller, antes de iniciarlo:
Símbolos

- P :: pendiente
- O :: falta
- X :: completo

El programa de este taller constará:

-[X] Herramientas de desarrollo en Rust
-[X] Estructuras, enums, flujos de control
-[X] Vectores, parseo, traits
-[P] Borrow, lifetimes, derives
-[P] macros, errores
-[x] matching
-[x] Creación de módulos y testing
-[O] WASM
-[O] Conector a Python
-[O] Interfaces gráficas 
-[x] Logging y tracing
-[x] Creación de comandos
-[P] Algoritmos interesantes
-[O] Bots
-[x] Async I/O, tokio
-[x] Serializacion
-[O] gRPC, protobuffers
-[x] Threading, futures, paralelización

Como guía tendremos los libros:

- zero 2 production
- refactoring to rust

* Herramientas

Los siguientes software se han utilizado para el desarrollo del
taller.

- Linux mint debbie
- Emacs / OrgMode
- OpenBoard
- Terminal

* Recursos

- Grupo Telegram 'Aprender Rust' ::https://t.me/aprenderrust

- Repositorio de sesiones ::
  https://gitlab.com/rust-espanol/aprender-rust-en-espanol.git

- Playlist Youtube :: https://www.youtube.com/watch?v=dDX-MMFD8YI&list=PLP3JrIiWQArVUYA2Mt8S_jVvRq_SElVWB

- Página Linkedin :: https://www.linkedin.com/company/93656122/admin/

* Temas tratados por sesión

** Sesion 1

Se presenta cargo como herramienta para la gestión de proyectos y se
realiza un primer ejercicio siguiendo 'Rust Book'.
Conceptos básicos como diferenciar String de str, entre otros.
Alocación en memoria.

** Sesión 2

Se estudian funciones, uso de tipos de biblioteca estándar,
estructuras de control y test básico.

Ejemplo 1d: piratas.

** Sesión 3

Se introduce enum Result, y la estructura Path-PathBuf
Creación de comandos con argumentos usando std
Accesio I/O archivos

** Sesión4
Lectura y escritura de archivos CSV
Serialización y deserialización
Ejercicio de uso de Path y PathBuf
Paralelo String/PathBuf
Presentación del concepto 'trait'

** Sesión 5

Ejercicio creación de comando simplificado de AWK para leer stream de
datos y seleccionar campos.

AWK es un lenguaje/herramienta para el procesamiento de textos.

Introducción al enum Option
Uso de match con enums (Option/Result)
Creación de structs con derive/derivative
Collections -> Hashmap

** Sesion 6

Introducción a expresiones regulares con rust.
Presentación de la idea de 'generics'
Combinación de traits y generics.
Ejemplo de biomas

** Sesion 7

Solución del ejemplo 6
Estructuración de un proyectos
Uso de generics  y traits
Presentación de 'Smart Pointers' -> 
- Box
- Rc
- Weak

** Sesión 8

Caĺculos de tiempo, ¿Cuánto tiempo hemos vivido?
Uso de timezone.
Introducción a threading

** Sesión 9

Creación de funciones anónimas o closures
Traits que implementan FnOnce, Fn, FnMut
Multithreading y uso de Mutex para uso compartido
Canales para mensajear objetos

** Sesión 10

Introducción a asincronimo/concurrencia
Uso de bib estandar async/await -> trait Future
Presentación de crate "async_std" y "futures"
Conceptos como 'event loop'


** Sesión 11

Conceptos para comunicación interprocesos
Creación de 'socket-unix' y "socket-tcp"
Comunicación de datos a través de socket
Serialización y binarización de estructuras

** Sesión 12

Conversión de datos tipos básicos a bytes y viceversa.
Transmisión de mensajes más complejos que un string
Reestructuración de un proyecto.

** Sesión 13

Operadores 'bitwise'
Conversión de tipos int y float
Uso de socket para comunicar bytes.
Socket con async


** Sesión 14.

Ejercicios de programación funcional
Programación con dos lenguajes:
- Haskell
- Rust
Solución de las primeras páginas del libro de ejercicios 'Piensa en Haskell'
Problemas matemáticos y geométricos


** Sesión 15

Ejercicios de programación funcional
Programación con dos lenguajes:
- Haskell
- Rust
Solución de las siguientespáginas del libro de ejercicios 'Piensa en Haskell'
Problemas matemáticos y geométricos

** Sesión 16

Introducción a  bases de datos con Rust
Principios de SQL
Comparativa de bases de datos
Selección de base de datos
Esquema general de una db, diferencia motor de datos
Introducción de crate *tokio* seguimiento de tutorial

** Sesión 17

Taller de Óxido, en castellano mencionando la polémica de la
'fundación' para limitar el uso del nombre de rust.

- Continuación del tutorial de Tokio
- Uso y definición de variables de ambiente
- Inicialización de uso de SQL con Rust: crate SQLx

Presentación de ejemplo: Temperatura-Ciudad

Se crean tablas con SQL
Se crea esquema

** Sesión 18

Se implementa la creación de tablas con restricciones
Se agregan datos  a las tablas
Se crean funciones para consultar tablas usando Rust +SQLx

** Sesión 19

Se modifica la estructura de la db con SQl
Se implementan funciones para crear tablas, modificarlas.
Se implementan funciones para agregar datos en tablas

Se enseña el concepto de 'migración'
Se implementa migración que construye la db y las tablas en el
ejercicio.

** Sesión 20

Se crean inserts como funciones en Rust
Se leen csv y cargan datos a la base de datos creando comandos en Rust
Se crean test básicos

** Sesión 21

Se modifica el nombre del proyecto de 'test-db' a 'ejemplo-db'
Se implementa logging con tracing del ecosistema tokio
Se implemetnacion funciones de 'delete' (update propuesto)
Se crean test adicionales

** Sesión 22

Se presenta el concepto de 'macros', cómo es el procedimiento que
integra una macro al compilar y como se crean.
Se caracterizan los tipos de macros
Se implementa 'macro-derive'

** Futuras sesiones

- Macros de fn
- Wasm
- gRPC
- Conector a Python
- GUI
- Más pattern matching
- Lifetimes y smart pointers
- Juegos
- Algoritmos

* Difusión

Cada sesión se graba y se sube, sin más edición que la conversión de
formato de video.
Se publica a yt y se comparte en las redes y canales.

* Por hacer

Una web pública
Sistema de donaciones


